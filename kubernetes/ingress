 Ingress is an API object that provides a way to manage external access to the services in your cluster. 
 An Ingress acts as a layer 7 (HTTP/HTTPS) load balancer that routes traffic to the appropriate service based on the rules defined in the Ingress resource.

https://github.com/adv4000/k8s-lessons/tree/master/Lesson-11-Ingress
---------------------------------------------------------------------
### Install Ingress Controller: Contour
kubectl apply -f https://projectcontour.io/quickstart/contour.yaml
kubectl get services -n projectcontour envoy -o wide

Get LoadBalancer IP or DNS Name and assign Your Domain to this DNS name

# Create Deployments
kubectl create deployment main   --image=adv4000/k8sphp:latest
kubectl create deployment web1   --image=adv4000/k8sphp:version1
kubectl create deployment web2   --image=adv4000/k8sphp:version2
kubectl create deployment webx   --image=adv4000/k8sphp:versionx
kubectl create deployment tomcat --image=tomcat:8.5.38

# Scale Deployments
kubectl scale deployment main  --replicas 2
kubectl scale deployment web1  --replicas 2
kubectl scale deployment web2  --replicas 2
kubectl scale deployment webx  --replicas 2

# Create Services, default type is: --type=ClusterIP
kubectl expose deployment main   --port 80
kubectl expose deployment web1   --port 80
kubectl expose deployment web2   --port 80
kubectl expose deployment webx   --port 80
kubectl expose deployment tomcat --port 8080

kubectl get services -o wide

kubectl apply -f ingress-hosts.yaml
kubectl apply -f ingress-paths.yaml
kubectl get ingress
kubectl describe ingress

# Completely delete Ingress Controller: Contour
kubectl delete ns projectcontour


------------------------------------
apiVersion: networking.k8s.io/v1beta1
kind: Ingress
metadata:
  name: ingress-hosts

spec:
  rules:
  - host: www.adv-it.net
    http:
      paths:
        - backend:
           serviceName: main
           servicePort: 80

  - host: web1.adv-it.net
    http:
      paths:
        - backend:
           serviceName: web1
           servicePort: 80

  - host: web2.adv-it.net
    http:
      paths:
        - backend:
           serviceName: web2
           servicePort: 80

  - host: cat.adv-it.net
    http:
      paths:
        - backend:
           serviceName: tomcat
           servicePort: 8080
